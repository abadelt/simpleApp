kind: BuildConfig
apiVersion: "v1"
metadata:
  name: "jvm-jenkins-pipeline"
spec:
#  source:
#    type: Git
#    git:
#      uri: https://github.com/abadelt/fabricstore.git
  strategy:
    jenkinsPipelineStrategy:
      jenkinsfile: |-
        def templatePath = 'https://raw.githubusercontent.com/abadelt/simpleApp/master/openshift/simpleApp.yaml'
        def templateName = 'simpleapp'
        pipeline {
            agent any
            environment {
                ENVIRONMENT = 'dev'
            }
            options {
                // set a timeout of 3 minutes for this pipeline
                timeout(time: 3, unit: 'MINUTES')
            }

            stages {
                stage('preamble') {
                    steps {
                        script {
                            openshift.withCluster() {
                                openshift.withProject() {
                                    echo "Using project: ${openshift.project()}"
                                }
                            }
                        }
                    }
                }
                stage('cleanup') {
                    steps {
                        script {
                            openshift.withCluster() {
                                openshift.withProject() {
                                    // delete everything with this template label
                                    openshift.selector("all", [template: templateName]).delete()
                                    // delete any secrets with this template label
                                    if (openshift.selector("secrets", templateName).exists()) {
                                        openshift.selector("secrets", templateName).delete()
                                    }
                                }
                            }
                        } // script
                    } // steps
                } // stage
                stage('create') {
                    steps {
                        script {
                            openshift.withCluster() {
                                openshift.withProject() {
                                    // create a new application from the templatePath
                                    openshift.newApp(templatePath)
                                }
                            }
                        } // script
                    } // steps
                } // stage
                stage('build') {
                    parallel {
                        stage ('follow build') {
                            steps {
                                script {
                                    openshift.withCluster() {
                                        openshift.withProject() {
                                            def builds = openshift.selector("bc", templateName).related('builds')
                                            echo "Builds size is: ${builds.count()}"
                                            if (builds.count() != 1) {
                                                return false
                                            } else {
                                                parallel {
                                                    builds.untilEach(1) {
                                                        def phase = it.object().status.phase
                                                        echo "Build status for ${it.name()} is ${phase}"
                                                        if (phase == "Failed" || phase == "Error") {
                                                            error("Build failed !!!")
                                                        }
                                                        return (phase == "Complete")
                                                    }
                                                }
                                            }

                                        }
                                    }
                                }
                            } // script
                        }
                        stage ('sync test results') {
                            steps {
                                script {
                                    openshift.withCluster() {
                                        openshift.withProject() {
                                            sh 'mkdir test-results'
                                            openshift.rsync("simpleapp-1-build:/opt/app-root/src/source/build/test-results",
                                                "./test-results")
                                            junit 'test-results/test/TEST-*.xml'
                                        }
                                    }
                                }
                            }
                        }
                    }
                } // stage
                stage('Unit Test') {
                    steps {
                        sh 'echo `pwd`'
                        sh 'echo `ls -al`'
                        // sh 'cd source && gradle test'
                        // junit '**/test-results/test/TEST-*.xml'
                    }
                }
                stage('deploy') {
                    steps {
                        script {
                            openshift.withCluster() {
                                openshift.withProject() {
                                    // def rolloutMgr =
                                    openshift.selector("dc", templateName).rollout()
                                    def deployments = openshift.selector("dc", templateName).related('pods')
                                    echo "Deployments size is: ${deployments.count()}"
                                    if (deployments.count() == 0) {
                                        return false
                                    } else {
                                        deployments.untilEach(1) {
                                            echo "Deployments status for ${it.name()} is ${it.object().status.phase}"
                                            return (it.object().status.phase == "Running")
                                        }
                                    }
                                }
                            }
                        } // script
                    } // steps
                } // stage
                stage('tag') {
                    steps {
                        script {
                            openshift.withCluster() {
                                openshift.withProject() {
                                    // if everything else succeeded, tag the ${templateName}:latest image as ${templateName}-staging:latest
                                    // a pipeline build config for the staging environment can watch for the ${templateName}-staging:latest
                                    // image to change and then deploy it to the staging environment
                                    openshift.tag("${templateName}:latest", "${templateName}-staging:latest")
                                }
                            }
                        } // script
                    } // steps
                } // stage
            } // stages
        } // pipeline

      type: JenkinsPipeline
